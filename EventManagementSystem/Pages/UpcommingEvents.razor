@page "/events"
@inject EventService EventService

<div class="container mt-5">
    <div class="row">
        @if (events != null && events.Any())
        {
            @foreach (var eventItem in events)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow-sm">
                        <img src="@(!string.IsNullOrEmpty(eventItem.ImageUrl) ? eventItem.ImageUrl : "/images/default.jpg")"
                             class="card-img-top event-image"
                             alt="Event Image" />
                        <div class="card-body">
                            <h5 class="card-title">@eventItem.Name</h5>
                            <h5>Number of Tickets Sold: @eventItem.TicketsSold</h5>
                            <p class="card-text">@eventItem.Description</p>
                            <p class="text-muted">@eventItem.Date.ToString("MMMM dd, yyyy")</p>
                            <button class="btn btn-primary" @onclick="() => ShowTicketModal(eventItem)">Buy Tickets</button>
                            <button class="btn btn-secondary" @onclick="() => ShowEventDetails(eventItem)">Event Details</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No events available.</p>
        }
    </div>
</div>

<!-- Buy Tickets Modal -->
@if (isTicketModalVisible)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Buy Tickets</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (eventDetail != null)
                    {
                        <div class="form-group">
                            <label>Ticket ID:</label>
                            <input type="text" class="form-control" value="@eventDetail.Id" readonly />
                        </div>
                        <div class="form-group mt-3">
                            <label>Name:</label>
                            <input type="text" class="form-control" @bind="userName" />
                        </div>
                        <div class="form-group mt-3">
                            <label>Description:</label>
                            <textarea class="form-control" @bind="ticketDescription"></textarea>
                        </div>
                        <div class="form-group mt-3">
                            <label>Number of Tickets:</label>
                            <input type="number" class="form-control" @bind="ticketCount" />
                        </div>
                        <div class="form-group mt-3">
                            <label>Price:</label>
                            <input type="number" class="form-control" @bind="ticketPrice" />
                        </div>
                        <div class="form-group mt-3">
                            <label>Ticket Type:</label>
                            <select class="form-control" @bind="ticketType">
                                <option value="VIP (Male)">VIP (Male)</option>
                                <option value="VIP (Female)">VIP (Female)</option>
                                <option value="VIP (Couple)">VIP (Couple)</option>
                            </select>
                        </div>
                        <div class="form-group mt-3">
                            <label>Event Timing:</label>
                            <input type="text" class="form-control" value="@eventDetail.Date.ToString("MMMM dd, yyyy")" readonly />
                        </div>
                        <button class="btn btn-success mt-4" @onclick="BuyTicket">Buy Ticket</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Event Details Modal -->
@if (isEventDetailModalVisible)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Event Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (eventDetail != null)
                    {
                        <h5>@eventDetail.Name</h5>
                        <p>@eventDetail.Description</p>
                        <p><strong>Event Date:</strong> @eventDetail.Date.ToString("MMMM dd, yyyy")</p>
                    }
                    else
                    {
                        <p>No event details available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string? userName;
    private string? ticketDescription;
    private int ticketCount;
    private decimal ticketPrice;
    private string? ticketType;
    private Event? eventDetail;
    private List<Event> events = new List<Event>();
    private bool isTicketModalVisible = false;
    private bool isEventDetailModalVisible = false;
    private System.Timers.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEvents();

        // Initialize the timer
        timer = new System.Timers.Timer(10000); // 10 seconds
        timer.Elapsed += async (sender, args) => await UpdateTicketCounts();
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private async Task UpdateTicketCounts()
    {
        // Fetch updated ticket counts from the service
        var updatedEvents = await EventService.GetEvents();
        foreach (var updatedEvent in updatedEvents)
        {
            var existingEvent = events.FirstOrDefault(e => e.Id == updatedEvent.Id);
            if (existingEvent != null)
            {
                existingEvent.TicketsSold = updatedEvent.TicketsSold;
            }
        }

        // Trigger UI update
       await InvokeAsync(StateHasChanged);
    }

    private void ShowTicketModal(Event eventItem)
    {
        eventDetail = eventItem;
        userName = string.Empty;
        ticketDescription = string.Empty;
        ticketCount += 1;
        ticketPrice = 0;
        ticketType = null;
        isTicketModalVisible = true;
    }

    private void ShowEventDetails(Event eventItem)
    {
        eventDetail = eventItem;
        isEventDetailModalVisible = true;
    }

    private void CloseModal()
    {
        isTicketModalVisible = false;
        isEventDetailModalVisible = false;
    }

    private async Task BuyTicket()
    {
        if (!string.IsNullOrEmpty(userName) && ticketCount > 0 && ticketPrice > 0 && !string.IsNullOrEmpty(ticketType) && eventDetail != null)
        {
            await EventService.CreateTicketAsync(
                eventDetail.Id,
                userName,
                ticketDescription ?? string.Empty,
                ticketCount,
                ticketPrice,
                ticketType,
                eventDetail.Date
            );
            CloseModal();
        }
    }
}
